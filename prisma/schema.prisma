generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  name          String?
  bio           String?
  avatar        String?
  interests     Interest[]
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]  @relation("following")
  following     Follow[]  @relation("follower")
  messagesSent  Message[] @relation("sender")
  messagesReceived Message[] @relation("receiver")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Interest {
  id          String    @id @default(cuid())
  name        String    @unique
  users       User[]
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id          String    @id @default(cuid())
  content     String
  image       String?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  interests   Interest[]
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Follow {
  id          String    @id @default(cuid())
  follower    User      @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User      @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime  @default(now())

  @@unique([followerId, followingId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  sender      User      @relation("sender", fields: [senderId], references: [id])
  senderId    String
  receiver    User      @relation("receiver", fields: [receiverId], references: [id])
  receiverId  String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Job {
  id          String    @id @default(cuid())
  title       String
  company     String
  location    String
  description String
  salary      String?
  url         String
  source      String    // 'linkedin' or 'naukri'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

